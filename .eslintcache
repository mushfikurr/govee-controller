[{"D:\\Programming\\JavaScript\\light-interface-1\\src\\index.js":"1","D:\\Programming\\JavaScript\\light-interface-1\\src\\hooks\\useInterval.js":"2","D:\\Programming\\JavaScript\\light-interface-1\\src\\utils\\api.js":"3","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AjaxPowerSwitch.js":"4","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AjaxSlider.js":"5","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\DeviceCurrent.js":"6","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AppContainer.js":"7","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\DeviceController.js":"8","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\DeviceCurrentElement.js":"9","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\DeviceListElement.js":"10"},{"size":176,"mtime":1612796670366,"results":"11","hashOfConfig":"12"},{"size":526,"mtime":1612541664403,"results":"13","hashOfConfig":"12"},{"size":1982,"mtime":1614700049023,"results":"14","hashOfConfig":"12"},{"size":830,"mtime":1614695840461,"results":"15","hashOfConfig":"12"},{"size":1064,"mtime":1614700198595,"results":"16","hashOfConfig":"12"},{"size":4493,"mtime":1614696897713,"results":"17","hashOfConfig":"12"},{"size":1011,"mtime":1613488959779,"results":"18","hashOfConfig":"12"},{"size":2586,"mtime":1614693775717,"results":"19","hashOfConfig":"12"},{"size":3219,"mtime":1614696924127,"results":"20","hashOfConfig":"12"},{"size":1810,"mtime":1614173456994,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"woutrg",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\Programming\\JavaScript\\light-interface-1\\src\\index.js",[],["46","47"],"D:\\Programming\\JavaScript\\light-interface-1\\src\\hooks\\useInterval.js",["48"],"import React, { useEffect, useRef } from 'react';\r\n\r\n// Written by Dan Abramov\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","D:\\Programming\\JavaScript\\light-interface-1\\src\\utils\\api.js",[],"D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AjaxPowerSwitch.js",[],"D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AjaxSlider.js",["49"],"D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\DeviceCurrent.js",["50","51","52","53","54","55"],"import React, { useEffect, useState } from 'react';\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport { dispatchAPICommand, getAPIDeviceState } from '../utils/api';\r\nimport { CurrentDeviceElement } from './functional/DeviceCurrentElement';\r\n\r\nexport function DeviceCurrent(device) {\r\n    // Device\r\n    const [online, updateOnline] = useState(true);\r\n    const [powerState, updatePowerState] = useState(\"off\");\r\n    const [brightness, updateBrightness] = useState(100);\r\n    const [color, updateColor] = useState(JSON.stringify({'color':{'r':0,'b':0,'g':0}}));\r\n    const [loading, setLoading] = useState(true);\r\n    const [hasMounted, setMounted] = useState(false);\r\n\r\n    const updateAllProperties = (properties) => {\r\n        updateOnline(properties[0].online);\r\n        updatePowerState(properties[1].powerState);\r\n        updateBrightness(properties[2].brightness);\r\n        updateColor(JSON.stringify(properties[3].color));\r\n    }\r\n\r\n    // On component load\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        // console.log(device);\r\n        getAPIDeviceState(device)\r\n        .then(response => {\r\n            const deviceData = response.data.data;\r\n            // console.log(response.data.data);\r\n            updateAllProperties(deviceData.properties);\r\n            setLoading(false);\r\n            setMounted(true);\r\n        })\r\n    }, []);\r\n\r\n    // Handles polling\r\n    const [pollingRate, setPollingRate] = useState(5000);\r\n    const [shouldPoll, setShouldPoll] = useState(false);\r\n    useInterval(() =>{\r\n        if (shouldPoll) {\r\n            getAPIDeviceState(device)\r\n            .then(response => {\r\n                \r\n                    if (hasMounted && !isOnCooldown && !loading) {\r\n                        const deviceData = response.data.data;\r\n                        updateAllProperties(deviceData.properties);\r\n                    }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        }\r\n    }, pollingRate)\r\n\r\n    // When individual states change (i.e. Power on)\r\n    // Send a PUT request detailing changes to API.\r\n    const [isOnCooldown, setIsOnCooldown] = useState(false); // Cooldown for all device instructions\r\n\r\n    // Toggle Power\r\n    const newPowerState = powerState === \"on\" ? \"off\" : \"on\";\r\n    const handlePower = _ => {if (!isOnCooldown) updatePowerState(newPowerState);}\r\n    useEffect(() => {\r\n        if (hasMounted && !isOnCooldown) {\r\n            setLoading(true);\r\n            // Send PUT request to server to update with current state\r\n            const command = {\"name\": \"turn\", \"value\": powerState}\r\n            dispatchAPICommand(command, device)\r\n            .then(response => {\r\n                if (response.data.message === \"Success\") {\r\n                    updatePowerState(powerState);\r\n                    setLoading(false);\r\n                    setIsOnCooldown(true);\r\n                    let cooldownTimer = setTimeout(() => {\r\n                        setIsOnCooldown(false);\r\n                    }, 800);\r\n                    return () => {\r\n                        clearTimeout(cooldownTimer);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [powerState])\r\n\r\n    const handleBrightnessChange = (event, newValue) => {\r\n        if (!isOnCooldown) {\r\n            updateBrightness(newValue);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (hasMounted && !isOnCooldown) {\r\n            setLoading(true);\r\n            const command = {\"name\": \"brightness\", \"value\": brightness};\r\n            dispatchAPICommand(command, device)\r\n            .then(response => {\r\n                if (response.data.message === \"Success\") {\r\n                    updateBrightness(brightness);\r\n                    setLoading(false);\r\n                    setIsOnCooldown(true);\r\n                    let cooldownTimer = setTimeout(() => {\r\n                        setIsOnCooldown(false);\r\n                    }, 800);\r\n                    return () => {\r\n                        clearTimeout(cooldownTimer);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [brightness])\r\n\r\n    const propsToPass = {\r\n        deviceModel: device.model, deviceName: device.name,\r\n        onPower: handlePower, onBrightnessChange: handleBrightnessChange,\r\n        isOnCooldown: isOnCooldown,\r\n        powerState: powerState, brightness: brightness, color: color, warmth: 0\r\n    }\r\n\r\n    return ( <CurrentDeviceElement {...propsToPass} /> )\r\n}","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\AppContainer.js",[],"D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\DeviceController.js",["56","57","58"],"import { useEffect, useState } from 'react';\r\nimport { getAPIAllDevicesState } from '../utils/api';\r\nimport { DeviceListElement } from './functional/DeviceListElement';\r\nimport { DeviceCurrent } from './DeviceCurrent';\r\nimport { Typography, Box, makeStyles, IconButton } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nexport function DeviceController() {\r\n    const useStyles = makeStyles((theme) => ({\r\n        dashboardSpace: {\r\n            marginBottom: theme.spacing(3)\r\n        },\r\n        panelHeadings: {\r\n            fontSize: \"1.2rem\"\r\n        },\r\n        centerVertical: {\r\n            display: 'flex', \r\n            alignItems: 'center',\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n    const [devices, updateDevices] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentDevice, setCurrentDevice] = useState({});\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getAPIAllDevicesState()\r\n        .then(response => {\r\n            const deviceListFromResponse = response.data.data.devices;\r\n            updateDevices(deviceListFromResponse);\r\n            setLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (devices.length > 0) {\r\n            setCurrentDevice(devices[0]);\r\n        }\r\n    }, [devices]);\r\n\r\n    useEffect(() => {\r\n        console.log(currentDevice);\r\n    }, [currentDevice]);\r\n\r\n    const handleClick = (deviceId) => {\r\n        const foundDevice = devices.find(obj => obj.device === deviceId);\r\n        setCurrentDevice(foundDevice);\r\n    }\r\n\r\n    const renderDevicePanel = () => {\r\n        // TODO: Move DeviceListElement\r\n        if (Object.keys(currentDevice).length != 0)\r\n            return <DeviceCurrent {...currentDevice} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.panelHeadings} variant='overline' element='h2'>\r\n                <Box className={classes.centerVertical} color=\"text.primary\">\r\n                    { loading === true ? <>LOADING..</> : <>DEVICES</>}\r\n                    <IconButton style={{paddingLeft: \"0.5rem\", marginTop: \"-2px\"}}>\r\n                        <RefreshIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </Typography>\r\n            {/* <DeviceListElement currentDevice={device} devices={devices} handleClick={handleClick} /> */}\r\n            { renderDevicePanel() }\r\n            {/* <div>\r\n                { devices.map( (device) => <CurrentDevice key={device.device} {...device} /> ) }\r\n            </div> */}\r\n        </>\r\n    );\r\n}","D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\DeviceCurrentElement.js",[],"D:\\Programming\\JavaScript\\light-interface-1\\src\\components\\functional\\DeviceListElement.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},{"ruleId":"63","severity":1,"message":"67","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":19},{"ruleId":"63","severity":1,"message":"68","line":8,"column":12,"nodeType":"65","messageId":"66","endLine":8,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":34,"column":8,"nodeType":"71","endLine":34,"endColumn":10,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"73","line":37,"column":25,"nodeType":"65","messageId":"66","endLine":37,"endColumn":39},{"ruleId":"63","severity":1,"message":"74","line":38,"column":24,"nodeType":"65","messageId":"66","endLine":38,"endColumn":37},{"ruleId":"69","severity":1,"message":"75","line":82,"column":8,"nodeType":"71","endLine":82,"endColumn":20,"suggestions":"76"},{"ruleId":"69","severity":1,"message":"75","line":108,"column":8,"nodeType":"71","endLine":108,"endColumn":20,"suggestions":"77"},{"ruleId":"63","severity":1,"message":"78","line":3,"column":10,"nodeType":"65","messageId":"66","endLine":3,"endColumn":27},{"ruleId":"63","severity":1,"message":"79","line":46,"column":11,"nodeType":"65","messageId":"66","endLine":46,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":53,"column":47,"nodeType":"82","messageId":"83","endLine":53,"endColumn":49},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'online' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'device'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'setPollingRate' is assigned a value but never used.","'setShouldPoll' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'device', 'hasMounted', and 'isOnCooldown'. Either include them or remove the dependency array.",["87"],["88"],"'DeviceListElement' is defined but never used.","'handleClick' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [device]",{"range":"95","text":"96"},"Update the dependencies array to be: [device, hasMounted, isOnCooldown, powerState]",{"range":"97","text":"98"},"Update the dependencies array to be: [brightness, device, hasMounted, isOnCooldown]",{"range":"99","text":"100"},[1363,1365],"[device]",[3207,3219],"[device, hasMounted, isOnCooldown, powerState]",[4127,4139],"[brightness, device, hasMounted, isOnCooldown]"]